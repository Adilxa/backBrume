import prisma from "../../db/db.config.js";

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
export const getMe = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        status: 400,
        message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const user = await prisma.user.findUnique({
      where: { id: parseInt(id) },
      include: {
        loyaltyCards: {
          include: {
            cups: {
              orderBy: { createdAt: "asc" },
            },
          },
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!user) {
      return res.status(404).json({
        status: 404,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∏ –Ω–µ–ø–æ–ª–Ω—É—é)
    const activeCard = user.loyaltyCards.find(card => 
      !card.isUsed && card.cups.length < 6
    );

    // –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ—Ñ–µ (–ø–æ–ª–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã)
    const availableFreeCoffees = user.loyaltyCards.filter(card => 
      card.cups.length === 6 && !card.isUsed
    ).length;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏: –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–≤–∞—è, –∑–∞—Ç–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±–º–µ–Ω—É, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    const sortedCards = user.loyaltyCards.sort((a, b) => {
      // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è) - –ø–µ—Ä–≤–∞—è
      if (!a.isUsed && a.cups.length < 6) return -1;
      if (!b.isUsed && b.cups.length < 6) return 1;
      
      // –ì–æ—Ç–æ–≤—ã–µ –∫ –æ–±–º–µ–Ω—É (–ø–æ–ª–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ) - –≤—Ç–æ—Ä—ã–µ
      if (!a.isUsed && a.cups.length === 6) return -1;
      if (!b.isUsed && b.cups.length === 6) return 1;
      
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ, –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
      return new Date(b.createdAt) - new Date(a.createdAt);
    });

    return res.json({
      status: 200,
      user: {
        id: user.id,
        email: user.email,
        currentProgress: activeCard ? activeCard.cups.length : 0,
        maxCups: 6,
        canAddCup: activeCard ? activeCard.cups.length < 6 : true,
        availableFreeCoffees,
        createdAt: user.createdAt,
        loyaltyCards: sortedCards.map(card => ({
          id: card.id,
          cupsCount: card.cups.length,
          isComplete: card.cups.length === 6,
          isUsed: card.isUsed,
          isActive: !card.isUsed && card.cups.length < 6, // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
          createdAt: card.createdAt,
          usedAt: card.usedAt,
          cups: card.cups,
        })),
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return res.status(500).json({
      status: 500,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –î–æ–±–∞–≤–∏—Ç—å —á–∞—à–∫—É –∫–æ—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const addCup = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        status: 400,
        message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const userId = parseInt(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        loyaltyCards: {
          include: {
            cups: true,
          },
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!user) {
      return res.status(404).json({
        status: 404,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∏ –Ω–µ–ø–æ–ª–Ω—É—é)
    let activeCard = user.loyaltyCards.find(card => 
      !card.isUsed && card.cups.length < 6
    );

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!activeCard) {
      activeCard = await prisma.loyaltyCard.create({
        data: {
          userId,
          isUsed: false,
        },
        include: {
          cups: true,
        },
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—à–∫—É –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    await prisma.cup.create({
      data: {
        loyaltyCardId: activeCard.id,
      },
    });

    const newCupCount = activeCard.cups.length + 1;
    let message;
    let isCardComplete = false;

    if (newCupCount === 6) {
      message = `üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –£ –≤–∞—Å ${newCupCount} –∏–∑ 6 —á–∞—à–µ–∫. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ!`;
      isCardComplete = true;
    } else {
      message = `‚òï –ß–∞—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –£ –≤–∞—Å ${newCupCount} –∏–∑ 6 —á–∞—à–µ–∫.`;
    }

    // –°—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const loyaltyCardsWithCups = await prisma.loyaltyCard.findMany({
      where: { userId },
      include: {
        cups: true,
      },
    });

    const completeCards = loyaltyCardsWithCups.filter(card => 
      card.cups.length === 6 && !card.isUsed
    ).length;

    return res.json({
      status: 200,
      message,
      user: {
        id: userId,
        currentProgress: newCupCount,
        maxCups: 6,
        canAddMore: newCupCount < 6,
        isCardComplete,
        availableFreeCoffees: completeCards,
        cupsUntilComplete: 6 - newCupCount,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—à–∫–∏:", error);
    return res.status(500).json({
      status: 500,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é)
export const claimFreeCoffee = async (req, res) => {
  try {
    const { id } = req.params;
    const { cardId } = req.body; // ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    if (!id) {
      return res.status(400).json({
        status: 400,
        message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const userId = parseInt(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({
        status: 404,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    let targetCard;

    if (cardId) {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ä—Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      targetCard = await prisma.loyaltyCard.findFirst({
        where: {
          id: parseInt(cardId),
          userId,
          isUsed: false,
        },
        include: {
          cups: true,
        },
      });
    } else {
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      const loyaltyCards = await prisma.loyaltyCard.findMany({
        where: {
          userId,
          isUsed: false,
        },
        include: {
          cups: true,
        },
        orderBy: { createdAt: "asc" },
      });

      targetCard = loyaltyCards.find(card => card.cups.length === 6);
    }

    if (!targetCard) {
      return res.status(400).json({
        status: 400,
        message: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ",
      });
    }

    if (targetCard.cups.length < 6) {
      return res.status(400).json({
        status: 400,
        message: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ù—É–∂–Ω–æ 6 —á–∞—à–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ",
      });
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
    await prisma.loyaltyCard.update({
      where: { id: targetCard.id },
      data: { 
        isUsed: true,
        usedAt: new Date(),
      },
    });

    // –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ—Ñ–µ
    const loyaltyCardsWithCups = await prisma.loyaltyCard.findMany({
      where: { 
        userId,
        isUsed: false 
      },
      include: {
        cups: true,
      },
    });

    const remainingFreeCoffees = loyaltyCardsWithCups.filter(card => 
      card.cups.length === 6
    ).length;

    return res.json({
      status: 200,
      message: `‚òï –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –ø–æ–ª—É—á–µ–Ω! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${remainingFreeCoffees} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ—Ñ–µ.`,
      user: {
        id: userId,
        availableFreeCoffees: remainingFreeCoffees,
        usedCardId: targetCard.id,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ:", error);
    return res.status(500).json({
      status: 500,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};
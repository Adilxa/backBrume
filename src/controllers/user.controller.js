import prisma from "../../db/db.config.js";

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
export const getMe = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        status: 400,
        message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const user = await prisma.user.findUnique({
      where: { id: parseInt(id) },
      include: {
        cups: {
          orderBy: { createdAt: "desc" },
        },
      },
    });

    if (!user) {
      return res.status(404).json({
        status: 404,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    return res.json({
      status: 200,
      user: {
        id: user.id,
        email: user.email,
        cupCount: user.cups.length,
        maxCups: 6,
        canAddCup: user.cups.length < 6,
        createdAt: user.createdAt,
        cups: user.cups,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return res.status(500).json({
      status: 500,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

// –î–æ–±–∞–≤–∏—Ç—å —á–∞—à–∫—É –∫–æ—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const addCup = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        status: 400,
        message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const userId = parseInt(id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({
        status: 404,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—à–µ–∫
    const currentCupCount = await prisma.cup.count({
      where: { userId },
    });

    let newCupCount;
    let message;
    let isFreeCoffee = false;

    if (currentCupCount >= 6) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ 6 —á–∞—à–µ–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º 1 –Ω–æ–≤—É—é
      await prisma.cup.deleteMany({
        where: { userId },
      });

      await prisma.cup.create({
        data: { userId },
      });

      newCupCount = 1;
      message =
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫.";
      isFreeCoffee = true;
    } else {
      // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —á–∞—à–∫—É
      await prisma.cup.create({
        data: { userId },
      });

      newCupCount = currentCupCount + 1;
      message = `‚òï –ß–∞—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –£ –≤–∞—Å ${newCupCount} –∏–∑ 6 —á–∞—à–µ–∫.`;
    }

    return res.json({
      status: 200,
      message,
      user: {
        id: userId,
        cupCount: newCupCount,
        maxCups: 6,
        canAddMore: newCupCount < 6,
        isFreeCoffee,
        cupsUntilFree: 6 - newCupCount,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—à–∫–∏:", error);
    return res.status(500).json({
      status: 500,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};
